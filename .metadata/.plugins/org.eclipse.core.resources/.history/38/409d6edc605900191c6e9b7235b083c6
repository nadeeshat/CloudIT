package com.cloudit;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

class WebCamRead implements Runnable, ThreadFactory{
	
	private static final long serialVersionUID = 6441489157408381878L;

	private Executor executor = Executors.newSingleThreadExecutor(this);
	private Webcam webcam = null;
	private WebcamPanel panel = null;
	private String decodedText = "hello";
	
	public WebCamRead()
	{
		super();
		Dimension size = WebcamResolution.QVGA.getSize();
		webcam = Webcam.getWebcams().get(0);
		webcam.setViewSize(size);
		
		panel = new WebcamPanel(webcam);
		panel.setPreferredSize(size);
		panel.setFPSDisplayed(true);
		
		executor.execute(this);
		
	}
	
	public void run() {
		
		do {
			
			try {
				
				Thread.sleep(100);
				
			}catch(InterruptedException e)
			{
				System.out.println(e.getMessage());
			}
			
			Result result = null;
			BufferedImage image = null;
			
			if(webcam.isOpen())
			{
				if((image = webcam.getImage()) == null){
					continue;
				}
				
				LuminanceSource source = new BufferedImageLuminanceSource(image);
				BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
				
				try {
					
					System.out.println("web cam open");
					result = new MultiFormatReader().decode(bitmap);
					
				}catch(NotFoundException e)
				{
					System.out.println(e.getMessage());
				}
			}
			
			if(result != null)
			{
				this.decodedText = result.getText();
				System.out.println(result.getText());
				System.out.println("hi");
			}
			
		} while(true);
		
	}
	

	public Thread newThread(Runnable r) {

		Thread t = new Thread(r, "Example runner");
		t.setDaemon(true);
		return t;
	}

	public String getDecodedText()
	{
		return this.decodedText;
	}
}
